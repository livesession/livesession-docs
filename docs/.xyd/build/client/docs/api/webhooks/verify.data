[{"_1":2},"/Users/zdunecki/Code/livesession/xyd/cli/plugins/xyd-plugin-zero/src/pages/docs",{"_3":4},"data",{"_5":6,"_36":37,"_42":43,"_47":41,"_48":49},"sidebarGroups",[7,29],{"_8":9,"_10":11},"group","Get Started","items",[12,21,25],{"_13":14,"_15":16,"_17":18,"_19":20},"title","Configuration","href","/docs/api/webhooks/configuration","active",false,"uniqIndex",0,{"_13":22,"_15":23,"_17":18,"_19":24},"Delivery","/docs/api/webhooks/delivery",1,{"_13":26,"_15":27,"_17":18,"_19":28},"Verify","/docs/api/webhooks/verify",2,{"_8":30,"_10":31},"Event Types",[32],{"_13":33,"_15":34,"_17":18,"_19":35},"session.event","/docs/api/webhooks/type-session-event",3,"breadcrumbs",[38,40],{"_13":9,"_15":39},"",{"_13":26,"_15":41},"docs/api/webhooks/verify","navlinks",{"_44":45,"_46":-7},"prev",{"_13":22,"_15":23},"next","slug","code","\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst toc = [{\n  \"depth\": 2,\n  \"value\": \"Quickstart\",\n  \"attributes\": {},\n  \"children\": []\n}];\nconst frontmatter = {\n  \"title\": \"Verify\"\n};\nconst themeSettings = {\n  bigArticle: true\n};\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    p: \"p\",\n    pre: \"pre\",\n    ...props.components\n  }, {Content, Subtitle, Tabs} = _components;\n  if (!Content) _missingMdxReference(\"Content\", true);\n  if (!Subtitle) _missingMdxReference(\"Subtitle\", true);\n  if (!Tabs) _missingMdxReference(\"Tabs\", true);\n  if (!Tabs.Content) _missingMdxReference(\"Tabs.Content\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Verify\"\n    }), \"\\n\", _jsx(Subtitle, {\n      children: _jsx(_components.p, {\n        children: \"Learn how to verify the authenticity of LiveSession webhook requests.\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Quickstart\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Before you proceed with responding to a webhook, it's crucial to ensure that the webhook originated from LiveSession.\\nThis verification can be accomplished by calculating a digital signature.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Every webhook request incorporates a base64-encoded HMAC-SHA256 signature included in \", _jsx(_components.code, {\n        children: \"LiveSession-Signature\"\n      }), \" header.\\nThis header is created using the webhook's secret in conjunction with the data transmitted in the request.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To compute the HMAC digest, follow below written algorithm:\"\n    }), \"\\n\", _jsxs(Tabs, {\n      items: [\"Node.js\", \"Python\"],\n      children: [_jsx(Tabs.Content, {\n        value: \"Node.js\",\n        children: _jsx(Content, {\n          children: _jsx(_components.pre, {\n            highlighted: \"{\\\"value\\\":\\\"import crypto from 'crypto';\\\\n\\\\n// Your webhook secret key\\\\nconst secretKey = 'your_secret_key_here';\\\\n\\\\n// Received data from the webhook payload\\\\nconst receivedData = 'received_data_here';\\\\n\\\\n// Received base64-encoded HMAC signature from the webhook headers\\\\nconst receivedSignatureBase64 = 'received_signature_here'; // Replace with actual received signature\\\\n\\\\n// Function to compute HMAC-SHA256 signature and return base64-encoded result\\\\nfunction computeHmacSha256Base64(data, secretKey) {\\\\n    const hmac = crypto.createHmac('sha256', secretKey);\\\\n    hmac.update(data);\\\\n\\\\n    return hmac.digest('base64');\\\\n}\\\\n\\\\n// Calculate the base64-encoded HMAC-SHA256 signature for the received data\\\\nconst calculatedSignatureBase64 = computeHmacSha256Base64(receivedData, secretKey);\\\\n\\\\n// Compare the received signature with the calculated signature\\\\nif (receivedSignatureBase64 === calculatedSignatureBase64) {\\\\n    console.log('Webhook signature is valid. Request is authentic.');\\\\n} else {\\\\n    console.log('Webhook signature is invalid. Request might be tampered.');\\\\n}\\\\n\\\",\\\"lang\\\":\\\"javascript\\\",\\\"meta\\\":\\\"js\\\",\\\"code\\\":\\\"import crypto from 'crypto';\\\\n\\\\n// Your webhook secret key\\\\nconst secretKey = 'your_secret_key_here';\\\\n\\\\n// Received data from the webhook payload\\\\nconst receivedData = 'received_data_here';\\\\n\\\\n// Received base64-encoded HMAC signature from the webhook headers\\\\nconst receivedSignatureBase64 = 'received_signature_here'; // Replace with actual received signature\\\\n\\\\n// Function to compute HMAC-SHA256 signature and return base64-encoded result\\\\nfunction computeHmacSha256Base64(data, secretKey) {\\\\n    const hmac = crypto.createHmac('sha256', secretKey);\\\\n    hmac.update(data);\\\\n\\\\n    return hmac.digest('base64');\\\\n}\\\\n\\\\n// Calculate the base64-encoded HMAC-SHA256 signature for the received data\\\\nconst calculatedSignatureBase64 = computeHmacSha256Base64(receivedData, secretKey);\\\\n\\\\n// Compare the received signature with the calculated signature\\\\nif (receivedSignatureBase64 === calculatedSignatureBase64) {\\\\n    console.log('Webhook signature is valid. Request is authentic.');\\\\n} else {\\\\n    console.log('Webhook signature is invalid. Request might be tampered.');\\\\n}\\\\n\\\",\\\"tokens\\\":[[\\\"import\\\",\\\"#AD3DA4\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"crypto\\\",\\\"#000000\\\"],\\\" \\\",[\\\"from\\\",\\\"#AD3DA4\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"'crypto'\\\",\\\"#D12F1B\\\"],[\\\";\\\",\\\"#333333\\\"],\\\"\\\\n\\\\n\\\",[\\\"// Your webhook secret key\\\",\\\"#536579\\\",{\\\"fontStyle\\\":\\\"italic\\\"}],\\\"\\\\n\\\",[\\\"const\\\",\\\"#AD3DA4\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"secretKey\\\",\\\"#000000\\\"],\\\" \\\",[\\\"=\\\",\\\"#333333\\\"],\\\" \\\",[\\\"'your_secret_key_here'\\\",\\\"#D12F1B\\\"],[\\\";\\\",\\\"#333333\\\"],\\\"\\\\n\\\\n\\\",[\\\"// Received data from the webhook payload\\\",\\\"#536579\\\",{\\\"fontStyle\\\":\\\"italic\\\"}],\\\"\\\\n\\\",[\\\"const\\\",\\\"#AD3DA4\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"receivedData\\\",\\\"#000000\\\"],\\\" \\\",[\\\"=\\\",\\\"#333333\\\"],\\\" \\\",[\\\"'received_data_here'\\\",\\\"#D12F1B\\\"],[\\\";\\\",\\\"#333333\\\"],\\\"\\\\n\\\\n\\\",[\\\"// Received base64-encoded HMAC signature from the webhook headers\\\",\\\"#536579\\\",{\\\"fontStyle\\\":\\\"italic\\\"}],\\\"\\\\n\\\",[\\\"const\\\",\\\"#AD3DA4\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"receivedSignatureBase64\\\",\\\"#000000\\\"],\\\" \\\",[\\\"=\\\",\\\"#333333\\\"],\\\" \\\",[\\\"'received_signature_here'\\\",\\\"#D12F1B\\\"],[\\\";\\\",\\\"#333333\\\"],\\\" \\\",[\\\"// Replace with actual received signature\\\",\\\"#536579\\\",{\\\"fontStyle\\\":\\\"italic\\\"}],\\\"\\\\n\\\\n\\\",[\\\"// Function to compute HMAC-SHA256 signature and return base64-encoded result\\\",\\\"#536579\\\",{\\\"fontStyle\\\":\\\"italic\\\"}],\\\"\\\\n\\\",[\\\"function\\\",\\\"#AD3DA4\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"computeHmacSha256Base64\\\",\\\"#7051D4\\\"],[\\\"(data, secretKey) {\\\",\\\"#333333\\\"],\\\"\\\\n    \\\",[\\\"const\\\",\\\"#AD3DA4\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"hmac\\\",\\\"#000000\\\"],\\\" \\\",[\\\"= crypto.\\\",\\\"#333333\\\"],[\\\"createHmac\\\",\\\"#7051D4\\\"],[\\\"(\\\",\\\"#333333\\\"],[\\\"'sha256'\\\",\\\"#D12F1B\\\"],[\\\", secretKey);\\\",\\\"#333333\\\"],\\\"\\\\n    \\\",[\\\"hmac.\\\",\\\"#333333\\\"],[\\\"update\\\",\\\"#7051D4\\\"],[\\\"(data);\\\",\\\"#333333\\\"],\\\"\\\\n\\\\n    \\\",[\\\"return\\\",\\\"#AD3DA4\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"hmac.\\\",\\\"#333333\\\"],[\\\"digest\\\",\\\"#7051D4\\\"],[\\\"(\\\",\\\"#333333\\\"],[\\\"'base64'\\\",\\\"#D12F1B\\\"],[\\\");\\\",\\\"#333333\\\"],\\\"\\\\n\\\",[\\\"}\\\",\\\"#333333\\\"],\\\"\\\\n\\\\n\\\",[\\\"// Calculate the base64-encoded HMAC-SHA256 signature for the received data\\\",\\\"#536579\\\",{\\\"fontStyle\\\":\\\"italic\\\"}],\\\"\\\\n\\\",[\\\"const\\\",\\\"#AD3DA4\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"calculatedSignatureBase64\\\",\\\"#000000\\\"],\\\" \\\",[\\\"=\\\",\\\"#333333\\\"],\\\" \\\",[\\\"computeHmacSha256Base64\\\",\\\"#7051D4\\\"],[\\\"(receivedData, secretKey);\\\",\\\"#333333\\\"],\\\"\\\\n\\\\n\\\",[\\\"// Compare the received signature with the calculated signature\\\",\\\"#536579\\\",{\\\"fontStyle\\\":\\\"italic\\\"}],\\\"\\\\n\\\",[\\\"if\\\",\\\"#AD3DA4\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"(receivedSignatureBase64 === calculatedSignatureBase64) {\\\",\\\"#333333\\\"],\\\"\\\\n    \\\",[\\\"console.\\\",\\\"#333333\\\"],[\\\"log\\\",\\\"#7051D4\\\"],[\\\"(\\\",\\\"#333333\\\"],[\\\"'Webhook signature is valid. Request is authentic.'\\\",\\\"#D12F1B\\\"],[\\\");\\\",\\\"#333333\\\"],\\\"\\\\n\\\",[\\\"}\\\",\\\"#333333\\\"],\\\" \\\",[\\\"else\\\",\\\"#AD3DA4\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"{\\\",\\\"#333333\\\"],\\\"\\\\n    \\\",[\\\"console.\\\",\\\"#333333\\\"],[\\\"log\\\",\\\"#7051D4\\\"],[\\\"(\\\",\\\"#333333\\\"],[\\\"'Webhook signature is invalid. Request might be tampered.'\\\",\\\"#D12F1B\\\"],[\\\");\\\",\\\"#333333\\\"],\\\"\\\\n\\\",[\\\"}\\\",\\\"#333333\\\"],\\\"\\\\n\\\"],\\\"annotations\\\":[],\\\"themeName\\\":\\\"cosmo-light\\\",\\\"style\\\":{\\\"color\\\":\\\"#333333\\\",\\\"background\\\":\\\"#fffffe\\\",\\\"colorScheme\\\":\\\"light\\\"}}\",\n            children: _jsx(_components.code, {\n              className: \"language-js\",\n              children: \"import crypto from 'crypto';\\n\\n// Your webhook secret key\\nconst secretKey = 'your_secret_key_here';\\n\\n// Received data from the webhook payload\\nconst receivedData = 'received_data_here';\\n\\n// Received base64-encoded HMAC signature from the webhook headers\\nconst receivedSignatureBase64 = 'received_signature_here'; // Replace with actual received signature\\n\\n// Function to compute HMAC-SHA256 signature and return base64-encoded result\\nfunction computeHmacSha256Base64(data, secretKey) {\\n    const hmac = crypto.createHmac('sha256', secretKey);\\n    hmac.update(data);\\n\\n    return hmac.digest('base64');\\n}\\n\\n// Calculate the base64-encoded HMAC-SHA256 signature for the received data\\nconst calculatedSignatureBase64 = computeHmacSha256Base64(receivedData, secretKey);\\n\\n// Compare the received signature with the calculated signature\\nif (receivedSignatureBase64 === calculatedSignatureBase64) {\\n    console.log('Webhook signature is valid. Request is authentic.');\\n} else {\\n    console.log('Webhook signature is invalid. Request might be tampered.');\\n}\\n\"\n            })\n          })\n        })\n      }), _jsx(Tabs.Content, {\n        value: \"Python\",\n        children: _jsx(Content, {\n          children: _jsx(_components.pre, {\n            highlighted: \"{\\\"value\\\":\\\"import hmac\\\\nimport hashlib\\\\nimport base64\\\\n\\\\n# Your webhook secret key (convert to bytes if not already)\\\\nsecret_key = b'your_secret_key_here'\\\\n\\\\n# Received data from the webhook payload (convert to bytes if not already)\\\\nreceived_data = b'received_data_here'\\\\n\\\\n# Received base64-encoded HMAC signature from the webhook headers\\\\nreceived_signature_base64 = \\\\\\\"received_signature_here\\\\\\\"  # Replace with actual received signature\\\\n\\\\n# Function to compute HMAC-SHA256 signature and return base64-encoded result\\\\ndef compute_hmac_sha256_base64(data, secret_key):\\\\n    hashed = hmac.new(secret_key, data, hashlib.sha256)\\\\n    return base64.b64encode(hashed.digest()).decode('utf-8')\\\\n\\\\n# Calculate the base64-encoded HMAC-SHA256 signature for the received data\\\\ncalculated_signature_base64 = compute_hmac_sha256_base64(received_data, secret_key)\\\\n\\\\n# Compare the received signature with the calculated signature\\\\nif received_signature_base64 == calculated_signature_base64:\\\\n    print(\\\\\\\"Webhook signature is valid. Request is authentic.\\\\\\\")\\\\nelse:\\\\n    print(\\\\\\\"Webhook signature is invalid. Request might be tampered.\\\\\\\")\\\\n\\\",\\\"lang\\\":\\\"python\\\",\\\"meta\\\":\\\"python\\\",\\\"code\\\":\\\"import hmac\\\\nimport hashlib\\\\nimport base64\\\\n\\\\n# Your webhook secret key (convert to bytes if not already)\\\\nsecret_key = b'your_secret_key_here'\\\\n\\\\n# Received data from the webhook payload (convert to bytes if not already)\\\\nreceived_data = b'received_data_here'\\\\n\\\\n# Received base64-encoded HMAC signature from the webhook headers\\\\nreceived_signature_base64 = \\\\\\\"received_signature_here\\\\\\\"  # Replace with actual received signature\\\\n\\\\n# Function to compute HMAC-SHA256 signature and return base64-encoded result\\\\ndef compute_hmac_sha256_base64(data, secret_key):\\\\n    hashed = hmac.new(secret_key, data, hashlib.sha256)\\\\n    return base64.b64encode(hashed.digest()).decode('utf-8')\\\\n\\\\n# Calculate the base64-encoded HMAC-SHA256 signature for the received data\\\\ncalculated_signature_base64 = compute_hmac_sha256_base64(received_data, secret_key)\\\\n\\\\n# Compare the received signature with the calculated signature\\\\nif received_signature_base64 == calculated_signature_base64:\\\\n    print(\\\\\\\"Webhook signature is valid. Request is authentic.\\\\\\\")\\\\nelse:\\\\n    print(\\\\\\\"Webhook signature is invalid. Request might be tampered.\\\\\\\")\\\\n\\\",\\\"tokens\\\":[[\\\"import\\\",\\\"#AD3DA4\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"hmac\\\",\\\"#333333\\\"],\\\"\\\\n\\\",[\\\"import\\\",\\\"#AD3DA4\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"hashlib\\\",\\\"#333333\\\"],\\\"\\\\n\\\",[\\\"import\\\",\\\"#AD3DA4\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"base64\\\",\\\"#333333\\\"],\\\"\\\\n\\\\n\\\",[\\\"# Your webhook secret key (convert to bytes if not already)\\\",\\\"#536579\\\",{\\\"fontStyle\\\":\\\"italic\\\"}],\\\"\\\\n\\\",[\\\"secret_key =\\\",\\\"#333333\\\"],\\\" \\\",[\\\"b\\\",\\\"#AD3DA4\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],[\\\"'your_secret_key_here'\\\",\\\"#D12F1B\\\"],\\\"\\\\n\\\\n\\\",[\\\"# Received data from the webhook payload (convert to bytes if not already)\\\",\\\"#536579\\\",{\\\"fontStyle\\\":\\\"italic\\\"}],\\\"\\\\n\\\",[\\\"received_data =\\\",\\\"#333333\\\"],\\\" \\\",[\\\"b\\\",\\\"#AD3DA4\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],[\\\"'received_data_here'\\\",\\\"#D12F1B\\\"],\\\"\\\\n\\\\n\\\",[\\\"# Received base64-encoded HMAC signature from the webhook headers\\\",\\\"#536579\\\",{\\\"fontStyle\\\":\\\"italic\\\"}],\\\"\\\\n\\\",[\\\"received_signature_base64 =\\\",\\\"#333333\\\"],\\\" \\\",[\\\"\\\\\\\"received_signature_here\\\\\\\"\\\",\\\"#D12F1B\\\"],\\\"  \\\",[\\\"# Replace with actual received signature\\\",\\\"#536579\\\",{\\\"fontStyle\\\":\\\"italic\\\"}],\\\"\\\\n\\\\n\\\",[\\\"# Function to compute HMAC-SHA256 signature and return base64-encoded result\\\",\\\"#536579\\\",{\\\"fontStyle\\\":\\\"italic\\\"}],\\\"\\\\n\\\",[\\\"def\\\",\\\"#AD3DA4\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"compute_hmac_sha256_base64\\\",\\\"#7051D4\\\"],[\\\"(data, secret_key):\\\",\\\"#333333\\\"],\\\"\\\\n    \\\",[\\\"hashed = hmac.new(secret_key, data, hashlib.sha256)\\\",\\\"#333333\\\"],\\\"\\\\n    \\\",[\\\"return\\\",\\\"#AD3DA4\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"base64.b64encode(hashed.digest()).decode(\\\",\\\"#333333\\\"],[\\\"'utf-8'\\\",\\\"#D12F1B\\\"],[\\\")\\\",\\\"#333333\\\"],\\\"\\\\n\\\\n\\\",[\\\"# Calculate the base64-encoded HMAC-SHA256 signature for the received data\\\",\\\"#536579\\\",{\\\"fontStyle\\\":\\\"italic\\\"}],\\\"\\\\n\\\",[\\\"calculated_signature_base64 = compute_hmac_sha256_base64(received_data, secret_key)\\\",\\\"#333333\\\"],\\\"\\\\n\\\\n\\\",[\\\"# Compare the received signature with the calculated signature\\\",\\\"#536579\\\",{\\\"fontStyle\\\":\\\"italic\\\"}],\\\"\\\\n\\\",[\\\"if\\\",\\\"#AD3DA4\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"received_signature_base64 == calculated_signature_base64:\\\",\\\"#333333\\\"],\\\"\\\\n    \\\",[\\\"print\\\",\\\"#7051D4\\\"],[\\\"(\\\",\\\"#333333\\\"],[\\\"\\\\\\\"Webhook signature is valid. Request is authentic.\\\\\\\"\\\",\\\"#D12F1B\\\"],[\\\")\\\",\\\"#333333\\\"],\\\"\\\\n\\\",[\\\"else\\\",\\\"#AD3DA4\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],[\\\":\\\",\\\"#333333\\\"],\\\"\\\\n    \\\",[\\\"print\\\",\\\"#7051D4\\\"],[\\\"(\\\",\\\"#333333\\\"],[\\\"\\\\\\\"Webhook signature is invalid. Request might be tampered.\\\\\\\"\\\",\\\"#D12F1B\\\"],[\\\")\\\",\\\"#333333\\\"],\\\"\\\\n\\\"],\\\"annotations\\\":[],\\\"themeName\\\":\\\"cosmo-light\\\",\\\"style\\\":{\\\"color\\\":\\\"#333333\\\",\\\"background\\\":\\\"#fffffe\\\",\\\"colorScheme\\\":\\\"light\\\"}}\",\n            children: _jsx(_components.code, {\n              className: \"language-python\",\n              children: \"import hmac\\nimport hashlib\\nimport base64\\n\\n# Your webhook secret key (convert to bytes if not already)\\nsecret_key = b'your_secret_key_here'\\n\\n# Received data from the webhook payload (convert to bytes if not already)\\nreceived_data = b'received_data_here'\\n\\n# Received base64-encoded HMAC signature from the webhook headers\\nreceived_signature_base64 = \\\"received_signature_here\\\"  # Replace with actual received signature\\n\\n# Function to compute HMAC-SHA256 signature and return base64-encoded result\\ndef compute_hmac_sha256_base64(data, secret_key):\\n    hashed = hmac.new(secret_key, data, hashlib.sha256)\\n    return base64.b64encode(hashed.digest()).decode('utf-8')\\n\\n# Calculate the base64-encoded HMAC-SHA256 signature for the received data\\ncalculated_signature_base64 = compute_hmac_sha256_base64(received_data, secret_key)\\n\\n# Compare the received signature with the calculated signature\\nif received_signature_base64 == calculated_signature_base64:\\n    print(\\\"Webhook signature is valid. Request is authentic.\\\")\\nelse:\\n    print(\\\"Webhook signature is invalid. Request might be tampered.\\\")\\n\"\n            })\n          })\n        })\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  toc,\n  frontmatter,\n  themeSettings,\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"]
