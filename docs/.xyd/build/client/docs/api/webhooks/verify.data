[{"_1":2,"_58":59},"layout:/docs/api/webhooks",{"_3":4},"data",{"_5":6,"_44":45,"_49":50,"_55":48,"_56":35,"_57":22},"sidebarGroups",[7,36],{"_8":9,"_10":-7,"_11":12},"group","Get Started","icon","items",[13,26,31],{"_14":15,"_16":17,"_18":19,"_20":21,"_10":22,"_23":22,"_24":25},"title","Configuration","href","/docs/api/webhooks/configuration","active",false,"uniqIndex",0,"","sidebarTitle","pageMeta",{"_14":15},{"_14":27,"_16":28,"_18":19,"_20":29,"_10":22,"_23":22,"_24":30},"Delivery","/docs/api/webhooks/delivery",1,{"_14":27},{"_14":32,"_16":33,"_18":19,"_20":34,"_10":22,"_23":22,"_24":35},"Verify","/docs/api/webhooks/verify",2,{"_14":32},{"_8":37,"_10":-7,"_11":38},"Event Types",[39],{"_14":40,"_16":41,"_18":19,"_20":42,"_10":22,"_23":22,"_24":43},"session.event","/docs/api/webhooks/type-session-event",3,{"_14":40},"breadcrumbs",[46,47],{"_14":9,"_16":22},{"_14":32,"_16":48},"docs/api/webhooks/verify","navlinks",{"_51":52,"_53":54},"prev",{"_14":27,"_16":28},"next",{"_14":40,"_16":41},"slug","metadata","bannerContentCode","/docs/api/webhooks",{"_3":60},{"_5":61,"_44":74,"_49":77,"_55":48,"_80":81,"_56":69,"_82":83},[62,70],{"_8":9,"_10":-7,"_11":63},[64,66,68],{"_14":15,"_16":17,"_18":19,"_20":21,"_10":22,"_23":22,"_24":65},{"_14":15},{"_14":27,"_16":28,"_18":19,"_20":29,"_10":22,"_23":22,"_24":67},{"_14":27},{"_14":32,"_16":33,"_18":19,"_20":34,"_10":22,"_23":22,"_24":69},{"_14":32},{"_8":37,"_10":-7,"_11":71},[72],{"_14":40,"_16":41,"_18":19,"_20":42,"_10":22,"_23":22,"_24":73},{"_14":40},[75,76],{"_14":9,"_16":22},{"_14":32,"_16":48},{"_51":78,"_53":79},{"_14":27,"_16":28},{"_14":40,"_16":41},"code","\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst toc = [{\n  \"depth\": 2,\n  \"id\": \"quickstart\",\n  \"value\": \"Quickstart\",\n  \"attributes\": {\n    \"hProperties\": {\n      \"id\": \"quickstart\"\n    }\n  },\n  \"children\": [],\n  \"maxTocDepth\": undefined\n}];\nconst frontmatter = {\n  \"title\": \"Verify\"\n};\nconst themeSettings = {\n  bigArticle: true\n};\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    p: \"p\",\n    pre: \"pre\",\n    ...props.components\n  }, {Subtitle, Tabs} = _components;\n  if (!Subtitle) _missingMdxReference(\"Subtitle\", true);\n  if (!Tabs) _missingMdxReference(\"Tabs\", true);\n  if (!Tabs.Content) _missingMdxReference(\"Tabs.Content\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"verify\",\n      children: \"Verify\"\n    }), \"\\n\", _jsx(Subtitle, {\n      children: _jsx(_components.p, {\n        children: \"Learn how to verify the authenticity of LiveSession webhook requests.\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"quickstart\",\n      children: \"Quickstart\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Before you proceed with responding to a webhook, it's crucial to ensure that the webhook originated from LiveSession.\\nThis verification can be accomplished by calculating a digital signature.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Every webhook request incorporates a base64-encoded HMAC-SHA256 signature included in \", _jsx(_components.code, {\n        children: \"LiveSession-Signature\"\n      }), \" header.\\nThis header is created using the webhook's secret in conjunction with the data transmitted in the request.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To compute the HMAC digest, follow below written algorithm:\"\n    }), \"\\n\", _jsxs(Tabs, {\n      items: [\"Node.js\", \"Python\"],\n      children: [_jsx(Tabs.Content, {\n        value: \"Node.js\",\n        children: _jsx(_components.pre, {\n          highlighted: \"{\\\"value\\\":\\\"import crypto from 'crypto';\\\\n\\\\n// Your webhook secret key\\\\nconst secretKey = 'your_secret_key_here';\\\\n\\\\n// Received data from the webhook payload\\\\nconst receivedData = 'received_data_here';\\\\n\\\\n// Received base64-encoded HMAC signature from the webhook headers\\\\nconst receivedSignatureBase64 = 'received_signature_here'; // Replace with actual received signature\\\\n\\\\n// Function to compute HMAC-SHA256 signature and return base64-encoded result\\\\nfunction computeHmacSha256Base64(data, secretKey) {\\\\n    const hmac = crypto.createHmac('sha256', secretKey);\\\\n    hmac.update(data);\\\\n\\\\n    return hmac.digest('base64');\\\\n}\\\\n\\\\n// Calculate the base64-encoded HMAC-SHA256 signature for the received data\\\\nconst calculatedSignatureBase64 = computeHmacSha256Base64(receivedData, secretKey);\\\\n\\\\n// Compare the received signature with the calculated signature\\\\nif (receivedSignatureBase64 === calculatedSignatureBase64) {\\\\n    console.log('Webhook signature is valid. Request is authentic.');\\\\n} else {\\\\n    console.log('Webhook signature is invalid. Request might be tampered.');\\\\n}\\\\n\\\",\\\"lang\\\":\\\"javascript\\\",\\\"meta\\\":\\\"js\\\",\\\"code\\\":\\\"import crypto from 'crypto';\\\\n\\\\n// Your webhook secret key\\\\nconst secretKey = 'your_secret_key_here';\\\\n\\\\n// Received data from the webhook payload\\\\nconst receivedData = 'received_data_here';\\\\n\\\\n// Received base64-encoded HMAC signature from the webhook headers\\\\nconst receivedSignatureBase64 = 'received_signature_here'; // Replace with actual received signature\\\\n\\\\n// Function to compute HMAC-SHA256 signature and return base64-encoded result\\\\nfunction computeHmacSha256Base64(data, secretKey) {\\\\n    const hmac = crypto.createHmac('sha256', secretKey);\\\\n    hmac.update(data);\\\\n\\\\n    return hmac.digest('base64');\\\\n}\\\\n\\\\n// Calculate the base64-encoded HMAC-SHA256 signature for the received data\\\\nconst calculatedSignatureBase64 = computeHmacSha256Base64(receivedData, secretKey);\\\\n\\\\n// Compare the received signature with the calculated signature\\\\nif (receivedSignatureBase64 === calculatedSignatureBase64) {\\\\n    console.log('Webhook signature is valid. Request is authentic.');\\\\n} else {\\\\n    console.log('Webhook signature is invalid. Request might be tampered.');\\\\n}\\\\n\\\",\\\"tokens\\\":[[\\\"import\\\",\\\"var(--ch-25)\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"crypto\\\",\\\"var(--ch-15)\\\"],\\\" \\\",[\\\"from\\\",\\\"var(--ch-25)\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"'crypto'\\\",\\\"var(--ch-27)\\\"],[\\\";\\\",\\\"var(--ch-22)\\\"],\\\"\\\\n\\\\n\\\",[\\\"// Your webhook secret key\\\",\\\"var(--ch-23)\\\",{\\\"fontStyle\\\":\\\"italic\\\"}],\\\"\\\\n\\\",[\\\"const\\\",\\\"var(--ch-25)\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"secretKey\\\",\\\"var(--ch-15)\\\"],\\\" \\\",[\\\"=\\\",\\\"var(--ch-22)\\\"],\\\" \\\",[\\\"'your_secret_key_here'\\\",\\\"var(--ch-27)\\\"],[\\\";\\\",\\\"var(--ch-22)\\\"],\\\"\\\\n\\\\n\\\",[\\\"// Received data from the webhook payload\\\",\\\"var(--ch-23)\\\",{\\\"fontStyle\\\":\\\"italic\\\"}],\\\"\\\\n\\\",[\\\"const\\\",\\\"var(--ch-25)\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"receivedData\\\",\\\"var(--ch-15)\\\"],\\\" \\\",[\\\"=\\\",\\\"var(--ch-22)\\\"],\\\" \\\",[\\\"'received_data_here'\\\",\\\"var(--ch-27)\\\"],[\\\";\\\",\\\"var(--ch-22)\\\"],\\\"\\\\n\\\\n\\\",[\\\"// Received base64-encoded HMAC signature from the webhook headers\\\",\\\"var(--ch-23)\\\",{\\\"fontStyle\\\":\\\"italic\\\"}],\\\"\\\\n\\\",[\\\"const\\\",\\\"var(--ch-25)\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"receivedSignatureBase64\\\",\\\"var(--ch-15)\\\"],\\\" \\\",[\\\"=\\\",\\\"var(--ch-22)\\\"],\\\" \\\",[\\\"'received_signature_here'\\\",\\\"var(--ch-27)\\\"],[\\\";\\\",\\\"var(--ch-22)\\\"],\\\" \\\",[\\\"// Replace with actual received signature\\\",\\\"var(--ch-23)\\\",{\\\"fontStyle\\\":\\\"italic\\\"}],\\\"\\\\n\\\\n\\\",[\\\"// Function to compute HMAC-SHA256 signature and return base64-encoded result\\\",\\\"var(--ch-23)\\\",{\\\"fontStyle\\\":\\\"italic\\\"}],\\\"\\\\n\\\",[\\\"function\\\",\\\"var(--ch-25)\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"computeHmacSha256Base64\\\",\\\"var(--ch-24)\\\"],[\\\"(data, secretKey) {\\\",\\\"var(--ch-22)\\\"],\\\"\\\\n    \\\",[\\\"const\\\",\\\"var(--ch-25)\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"hmac\\\",\\\"var(--ch-15)\\\"],\\\" \\\",[\\\"= crypto.\\\",\\\"var(--ch-22)\\\"],[\\\"createHmac\\\",\\\"var(--ch-24)\\\"],[\\\"(\\\",\\\"var(--ch-22)\\\"],[\\\"'sha256'\\\",\\\"var(--ch-27)\\\"],[\\\", secretKey);\\\",\\\"var(--ch-22)\\\"],\\\"\\\\n    \\\",[\\\"hmac.\\\",\\\"var(--ch-22)\\\"],[\\\"update\\\",\\\"var(--ch-24)\\\"],[\\\"(data);\\\",\\\"var(--ch-22)\\\"],\\\"\\\\n\\\\n    \\\",[\\\"return\\\",\\\"var(--ch-25)\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"hmac.\\\",\\\"var(--ch-22)\\\"],[\\\"digest\\\",\\\"var(--ch-24)\\\"],[\\\"(\\\",\\\"var(--ch-22)\\\"],[\\\"'base64'\\\",\\\"var(--ch-27)\\\"],[\\\");\\\",\\\"var(--ch-22)\\\"],\\\"\\\\n\\\",[\\\"}\\\",\\\"var(--ch-22)\\\"],\\\"\\\\n\\\\n\\\",[\\\"// Calculate the base64-encoded HMAC-SHA256 signature for the received data\\\",\\\"var(--ch-23)\\\",{\\\"fontStyle\\\":\\\"italic\\\"}],\\\"\\\\n\\\",[\\\"const\\\",\\\"var(--ch-25)\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"calculatedSignatureBase64\\\",\\\"var(--ch-15)\\\"],\\\" \\\",[\\\"=\\\",\\\"var(--ch-22)\\\"],\\\" \\\",[\\\"computeHmacSha256Base64\\\",\\\"var(--ch-24)\\\"],[\\\"(receivedData, secretKey);\\\",\\\"var(--ch-22)\\\"],\\\"\\\\n\\\\n\\\",[\\\"// Compare the received signature with the calculated signature\\\",\\\"var(--ch-23)\\\",{\\\"fontStyle\\\":\\\"italic\\\"}],\\\"\\\\n\\\",[\\\"if\\\",\\\"var(--ch-25)\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"(receivedSignatureBase64 === calculatedSignatureBase64) {\\\",\\\"var(--ch-22)\\\"],\\\"\\\\n    \\\",[\\\"console.\\\",\\\"var(--ch-22)\\\"],[\\\"log\\\",\\\"var(--ch-24)\\\"],[\\\"(\\\",\\\"var(--ch-22)\\\"],[\\\"'Webhook signature is valid. Request is authentic.'\\\",\\\"var(--ch-27)\\\"],[\\\");\\\",\\\"var(--ch-22)\\\"],\\\"\\\\n\\\",[\\\"}\\\",\\\"var(--ch-22)\\\"],\\\" \\\",[\\\"else\\\",\\\"var(--ch-25)\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"{\\\",\\\"var(--ch-22)\\\"],\\\"\\\\n    \\\",[\\\"console.\\\",\\\"var(--ch-22)\\\"],[\\\"log\\\",\\\"var(--ch-24)\\\"],[\\\"(\\\",\\\"var(--ch-22)\\\"],[\\\"'Webhook signature is invalid. Request might be tampered.'\\\",\\\"var(--ch-27)\\\"],[\\\");\\\",\\\"var(--ch-22)\\\"],\\\"\\\\n\\\",[\\\"}\\\",\\\"var(--ch-22)\\\"],\\\"\\\\n\\\"],\\\"annotations\\\":[],\\\"themeName\\\":\\\"cosmo\\\",\\\"style\\\":{\\\"colorScheme\\\":\\\"var(--ch-0)\\\"}}\",\n          descriptionContent: \"\",\n          children: _jsx(_components.code, {\n            className: \"language-js\",\n            regions: \"[]\",\n            lineRanges: \"[]\",\n            children: \"import crypto from 'crypto';\\n\\n// Your webhook secret key\\nconst secretKey = 'your_secret_key_here';\\n\\n// Received data from the webhook payload\\nconst receivedData = 'received_data_here';\\n\\n// Received base64-encoded HMAC signature from the webhook headers\\nconst receivedSignatureBase64 = 'received_signature_here'; // Replace with actual received signature\\n\\n// Function to compute HMAC-SHA256 signature and return base64-encoded result\\nfunction computeHmacSha256Base64(data, secretKey) {\\n    const hmac = crypto.createHmac('sha256', secretKey);\\n    hmac.update(data);\\n\\n    return hmac.digest('base64');\\n}\\n\\n// Calculate the base64-encoded HMAC-SHA256 signature for the received data\\nconst calculatedSignatureBase64 = computeHmacSha256Base64(receivedData, secretKey);\\n\\n// Compare the received signature with the calculated signature\\nif (receivedSignatureBase64 === calculatedSignatureBase64) {\\n    console.log('Webhook signature is valid. Request is authentic.');\\n} else {\\n    console.log('Webhook signature is invalid. Request might be tampered.');\\n}\\n\"\n          })\n        })\n      }), _jsx(Tabs.Content, {\n        value: \"Python\",\n        children: _jsx(_components.pre, {\n          highlighted: \"{\\\"value\\\":\\\"import hmac\\\\nimport hashlib\\\\nimport base64\\\\n\\\\n# Your webhook secret key (convert to bytes if not already)\\\\nsecret_key = b'your_secret_key_here'\\\\n\\\\n# Received data from the webhook payload (convert to bytes if not already)\\\\nreceived_data = b'received_data_here'\\\\n\\\\n# Received base64-encoded HMAC signature from the webhook headers\\\\nreceived_signature_base64 = \\\\\\\"received_signature_here\\\\\\\"  # Replace with actual received signature\\\\n\\\\n# Function to compute HMAC-SHA256 signature and return base64-encoded result\\\\ndef compute_hmac_sha256_base64(data, secret_key):\\\\n    hashed = hmac.new(secret_key, data, hashlib.sha256)\\\\n    return base64.b64encode(hashed.digest()).decode('utf-8')\\\\n\\\\n# Calculate the base64-encoded HMAC-SHA256 signature for the received data\\\\ncalculated_signature_base64 = compute_hmac_sha256_base64(received_data, secret_key)\\\\n\\\\n# Compare the received signature with the calculated signature\\\\nif received_signature_base64 == calculated_signature_base64:\\\\n    print(\\\\\\\"Webhook signature is valid. Request is authentic.\\\\\\\")\\\\nelse:\\\\n    print(\\\\\\\"Webhook signature is invalid. Request might be tampered.\\\\\\\")\\\\n\\\",\\\"lang\\\":\\\"python\\\",\\\"meta\\\":\\\"python\\\",\\\"code\\\":\\\"import hmac\\\\nimport hashlib\\\\nimport base64\\\\n\\\\n# Your webhook secret key (convert to bytes if not already)\\\\nsecret_key = b'your_secret_key_here'\\\\n\\\\n# Received data from the webhook payload (convert to bytes if not already)\\\\nreceived_data = b'received_data_here'\\\\n\\\\n# Received base64-encoded HMAC signature from the webhook headers\\\\nreceived_signature_base64 = \\\\\\\"received_signature_here\\\\\\\"  # Replace with actual received signature\\\\n\\\\n# Function to compute HMAC-SHA256 signature and return base64-encoded result\\\\ndef compute_hmac_sha256_base64(data, secret_key):\\\\n    hashed = hmac.new(secret_key, data, hashlib.sha256)\\\\n    return base64.b64encode(hashed.digest()).decode('utf-8')\\\\n\\\\n# Calculate the base64-encoded HMAC-SHA256 signature for the received data\\\\ncalculated_signature_base64 = compute_hmac_sha256_base64(received_data, secret_key)\\\\n\\\\n# Compare the received signature with the calculated signature\\\\nif received_signature_base64 == calculated_signature_base64:\\\\n    print(\\\\\\\"Webhook signature is valid. Request is authentic.\\\\\\\")\\\\nelse:\\\\n    print(\\\\\\\"Webhook signature is invalid. Request might be tampered.\\\\\\\")\\\\n\\\",\\\"tokens\\\":[[\\\"import\\\",\\\"var(--ch-25)\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"hmac\\\",\\\"var(--ch-22)\\\"],\\\"\\\\n\\\",[\\\"import\\\",\\\"var(--ch-25)\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"hashlib\\\",\\\"var(--ch-22)\\\"],\\\"\\\\n\\\",[\\\"import\\\",\\\"var(--ch-25)\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"base64\\\",\\\"var(--ch-22)\\\"],\\\"\\\\n\\\\n\\\",[\\\"# Your webhook secret key (convert to bytes if not already)\\\",\\\"var(--ch-23)\\\",{\\\"fontStyle\\\":\\\"italic\\\"}],\\\"\\\\n\\\",[\\\"secret_key =\\\",\\\"var(--ch-22)\\\"],\\\" \\\",[\\\"b\\\",\\\"var(--ch-25)\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],[\\\"'your_secret_key_here'\\\",\\\"var(--ch-27)\\\"],\\\"\\\\n\\\\n\\\",[\\\"# Received data from the webhook payload (convert to bytes if not already)\\\",\\\"var(--ch-23)\\\",{\\\"fontStyle\\\":\\\"italic\\\"}],\\\"\\\\n\\\",[\\\"received_data =\\\",\\\"var(--ch-22)\\\"],\\\" \\\",[\\\"b\\\",\\\"var(--ch-25)\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],[\\\"'received_data_here'\\\",\\\"var(--ch-27)\\\"],\\\"\\\\n\\\\n\\\",[\\\"# Received base64-encoded HMAC signature from the webhook headers\\\",\\\"var(--ch-23)\\\",{\\\"fontStyle\\\":\\\"italic\\\"}],\\\"\\\\n\\\",[\\\"received_signature_base64 =\\\",\\\"var(--ch-22)\\\"],\\\" \\\",[\\\"\\\\\\\"received_signature_here\\\\\\\"\\\",\\\"var(--ch-27)\\\"],\\\"  \\\",[\\\"# Replace with actual received signature\\\",\\\"var(--ch-23)\\\",{\\\"fontStyle\\\":\\\"italic\\\"}],\\\"\\\\n\\\\n\\\",[\\\"# Function to compute HMAC-SHA256 signature and return base64-encoded result\\\",\\\"var(--ch-23)\\\",{\\\"fontStyle\\\":\\\"italic\\\"}],\\\"\\\\n\\\",[\\\"def\\\",\\\"var(--ch-25)\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"compute_hmac_sha256_base64\\\",\\\"var(--ch-24)\\\"],[\\\"(data, secret_key):\\\",\\\"var(--ch-22)\\\"],\\\"\\\\n    \\\",[\\\"hashed = hmac.new(secret_key, data, hashlib.sha256)\\\",\\\"var(--ch-22)\\\"],\\\"\\\\n    \\\",[\\\"return\\\",\\\"var(--ch-25)\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"base64.b64encode(hashed.digest()).decode(\\\",\\\"var(--ch-22)\\\"],[\\\"'utf-8'\\\",\\\"var(--ch-27)\\\"],[\\\")\\\",\\\"var(--ch-22)\\\"],\\\"\\\\n\\\\n\\\",[\\\"# Calculate the base64-encoded HMAC-SHA256 signature for the received data\\\",\\\"var(--ch-23)\\\",{\\\"fontStyle\\\":\\\"italic\\\"}],\\\"\\\\n\\\",[\\\"calculated_signature_base64 = compute_hmac_sha256_base64(received_data, secret_key)\\\",\\\"var(--ch-22)\\\"],\\\"\\\\n\\\\n\\\",[\\\"# Compare the received signature with the calculated signature\\\",\\\"var(--ch-23)\\\",{\\\"fontStyle\\\":\\\"italic\\\"}],\\\"\\\\n\\\",[\\\"if\\\",\\\"var(--ch-25)\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],\\\" \\\",[\\\"received_signature_base64 == calculated_signature_base64:\\\",\\\"var(--ch-22)\\\"],\\\"\\\\n    \\\",[\\\"print\\\",\\\"var(--ch-24)\\\"],[\\\"(\\\",\\\"var(--ch-22)\\\"],[\\\"\\\\\\\"Webhook signature is valid. Request is authentic.\\\\\\\"\\\",\\\"var(--ch-27)\\\"],[\\\")\\\",\\\"var(--ch-22)\\\"],\\\"\\\\n\\\",[\\\"else\\\",\\\"var(--ch-25)\\\",{\\\"fontWeight\\\":\\\"bold\\\"}],[\\\":\\\",\\\"var(--ch-22)\\\"],\\\"\\\\n    \\\",[\\\"print\\\",\\\"var(--ch-24)\\\"],[\\\"(\\\",\\\"var(--ch-22)\\\"],[\\\"\\\\\\\"Webhook signature is invalid. Request might be tampered.\\\\\\\"\\\",\\\"var(--ch-27)\\\"],[\\\")\\\",\\\"var(--ch-22)\\\"],\\\"\\\\n\\\"],\\\"annotations\\\":[],\\\"themeName\\\":\\\"cosmo\\\",\\\"style\\\":{\\\"colorScheme\\\":\\\"var(--ch-0)\\\"}}\",\n          descriptionContent: \"\",\n          children: _jsx(_components.code, {\n            className: \"language-python\",\n            regions: \"[]\",\n            lineRanges: \"[]\",\n            children: \"import hmac\\nimport hashlib\\nimport base64\\n\\n# Your webhook secret key (convert to bytes if not already)\\nsecret_key = b'your_secret_key_here'\\n\\n# Received data from the webhook payload (convert to bytes if not already)\\nreceived_data = b'received_data_here'\\n\\n# Received base64-encoded HMAC signature from the webhook headers\\nreceived_signature_base64 = \\\"received_signature_here\\\"  # Replace with actual received signature\\n\\n# Function to compute HMAC-SHA256 signature and return base64-encoded result\\ndef compute_hmac_sha256_base64(data, secret_key):\\n    hashed = hmac.new(secret_key, data, hashlib.sha256)\\n    return base64.b64encode(hashed.digest()).decode('utf-8')\\n\\n# Calculate the base64-encoded HMAC-SHA256 signature for the received data\\ncalculated_signature_base64 = compute_hmac_sha256_base64(received_data, secret_key)\\n\\n# Compare the received signature with the calculated signature\\nif received_signature_base64 == calculated_signature_base64:\\n    print(\\\"Webhook signature is valid. Request is authentic.\\\")\\nelse:\\n    print(\\\"Webhook signature is invalid. Request might be tampered.\\\")\\n\"\n          })\n        })\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  toc,\n  frontmatter,\n  themeSettings,\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","rawPage","---\ntitle: Verify\n---\n\nexport const themeSettings = {\n    bigArticle: true\n}\n\n# Verify\n<Subtitle>\n    Learn how to verify the authenticity of LiveSession webhook requests.\n</Subtitle>\n\n## Quickstart\nBefore you proceed with responding to a webhook, it's crucial to ensure that the webhook originated from LiveSession.\nThis verification can be accomplished by calculating a digital signature.\n\nEvery webhook request incorporates a base64-encoded HMAC-SHA256 signature included in `LiveSession-Signature` header.\nThis header is created using the webhook's secret in conjunction with the data transmitted in the request.\n\nTo compute the HMAC digest, follow below written algorithm:\n\n<Tabs items={[\"Node.js\", \"Python\"]}>\n    <Tabs.Content value=\"Node.js\">\n        ```js\n        import crypto from 'crypto';\n\n        // Your webhook secret key\n        const secretKey = 'your_secret_key_here';\n\n        // Received data from the webhook payload\n        const receivedData = 'received_data_here';\n\n        // Received base64-encoded HMAC signature from the webhook headers\n        const receivedSignatureBase64 = 'received_signature_here'; // Replace with actual received signature\n\n        // Function to compute HMAC-SHA256 signature and return base64-encoded result\n        function computeHmacSha256Base64(data, secretKey) {\n            const hmac = crypto.createHmac('sha256', secretKey);\n            hmac.update(data);\n\n            return hmac.digest('base64');\n        }\n\n        // Calculate the base64-encoded HMAC-SHA256 signature for the received data\n        const calculatedSignatureBase64 = computeHmacSha256Base64(receivedData, secretKey);\n\n        // Compare the received signature with the calculated signature\n        if (receivedSignatureBase64 === calculatedSignatureBase64) {\n            console.log('Webhook signature is valid. Request is authentic.');\n        } else {\n            console.log('Webhook signature is invalid. Request might be tampered.');\n        }\n        ```\n    </Tabs.Content>\n    <Tabs.Content value=\"Python\">\n        ```python\n        import hmac\n        import hashlib\n        import base64\n\n        # Your webhook secret key (convert to bytes if not already)\n        secret_key = b'your_secret_key_here'\n\n        # Received data from the webhook payload (convert to bytes if not already)\n        received_data = b'received_data_here'\n\n        # Received base64-encoded HMAC signature from the webhook headers\n        received_signature_base64 = \"received_signature_here\"  # Replace with actual received signature\n\n        # Function to compute HMAC-SHA256 signature and return base64-encoded result\n        def compute_hmac_sha256_base64(data, secret_key):\n            hashed = hmac.new(secret_key, data, hashlib.sha256)\n            return base64.b64encode(hashed.digest()).decode('utf-8')\n\n        # Calculate the base64-encoded HMAC-SHA256 signature for the received data\n        calculated_signature_base64 = compute_hmac_sha256_base64(received_data, secret_key)\n\n        # Compare the received signature with the calculated signature\n        if received_signature_base64 == calculated_signature_base64:\n            print(\"Webhook signature is valid. Request is authentic.\")\n        else:\n            print(\"Webhook signature is invalid. Request might be tampered.\")\n        ```\n    </Tabs.Content>\n</Tabs>"]
