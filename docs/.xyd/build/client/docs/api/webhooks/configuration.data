[{"_1":2},"/Users/zdunecki/Code/livesession/xyd/cli/plugins/xyd-plugin-zero/src/pages/docs",{"_3":4},"data",{"_5":6,"_36":37,"_42":43,"_47":41,"_48":49},"sidebarGroups",[7,29],{"_8":9,"_10":11},"group","Get Started","items",[12,21,25],{"_13":14,"_15":16,"_17":18,"_19":20},"title","Configuration","href","/docs/api/webhooks/configuration","active",false,"uniqIndex",0,{"_13":22,"_15":23,"_17":18,"_19":24},"Delivery","/docs/api/webhooks/delivery",1,{"_13":26,"_15":27,"_17":18,"_19":28},"Verify","/docs/api/webhooks/verify",2,{"_8":30,"_10":31},"Event Types",[32],{"_13":33,"_15":34,"_17":18,"_19":35},"session.event","/docs/api/webhooks/type-session-event",3,"breadcrumbs",[38,40],{"_13":9,"_15":39},"",{"_13":14,"_15":41},"docs/api/webhooks/configuration","navlinks",{"_44":-7,"_45":46},"prev","next",{"_13":22,"_15":23},"slug","code","\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst toc = [{\n  \"depth\": 2,\n  \"value\": \"Quickstart\",\n  \"attributes\": {},\n  \"children\": []\n}];\nconst frontmatter = {\n  \"title\": \"Configuration\"\n};\nconst themeSettings = {\n  bigArticle: true\n};\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    p: \"p\",\n    strong: \"strong\",\n    ...props.components\n  }, {Callout, Steps, Subtitle} = _components;\n  if (!Callout) _missingMdxReference(\"Callout\", true);\n  if (!Steps) _missingMdxReference(\"Steps\", true);\n  if (!Steps.Item) _missingMdxReference(\"Steps.Item\", true);\n  if (!Subtitle) _missingMdxReference(\"Subtitle\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Configuration\"\n    }), \"\\n\", _jsx(Subtitle, {\n      children: _jsx(_components.p, {\n        children: \"Learn how to set up and configure webhooks in LiveSession.\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Webhooks\"\n      }), \" enable real-time communication between applications. When specific events happen, one app automatically sends data to another.\\nThis integration streamlines workflows, syncs systems without constant polling, and integrates third-party services.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"LiveSession triggers \", _jsx(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/Webhook\",\n        children: \"webhooks\"\n      }), \" via preset events, with ongoing expansion.\\nWhen a configured event occurs, our systems promptly notify your servers, delivering detailed event data.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Quickstart\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can customize your setup within LiveSession's Settings menu. In the \", _jsx(_components.code, {\n        children: \"API > Webhooks\"\n      }), \" section, oversee the URLs that facilitate LiveSession's interaction with your servers.\"]\n    }), \"\\n\", _jsx(Callout, {\n      children: _jsx(_components.p, {\n        children: \"Note that you must have an Admin or Owner role to manage webhook settings.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Endpoints have the following attributes:\"\n    }), \"\\n\", _jsxs(Steps, {\n      children: [_jsx(Steps.Item, {\n        children: _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"URL:\"\n          }), \" Each endpoint is uniquely identified by its URL, utilizing either the HTTP or HTTPS scheme. This URL signifies the server address that LiveSession establishes communication with.\"]\n        })\n      }), _jsx(Steps.Item, {\n        children: _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"Website:\"\n          }), \" The 'Website' field refers to an identifier for your chosen LiveSession-enabled website.\"]\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Once you've configured your endpoints, you can begin assigning them to specific events using \", _jsx(_components.a, {\n        href: \"/docs/capabilities/alerting\",\n        children: \"Alerts\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  toc,\n  frontmatter,\n  themeSettings,\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"]
