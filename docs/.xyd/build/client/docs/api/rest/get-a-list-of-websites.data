[{"_1":2,"_86":87},"layout:/docs/api/rest",{"_3":4},"data",{"_5":6,"_72":73,"_78":-7,"_79":77,"_80":81},"sidebarGroups",[7,61],{"_8":9,"_10":11},"group","Endpoints","items",[12,21,25,29,33,37,41,45,49,53,57],{"_13":14,"_15":16,"_17":18,"_19":20},"title","Get Sessions","href","/docs/api/rest/get-sessions","active",false,"uniqIndex",0,{"_13":22,"_15":23,"_17":18,"_19":24},"Get all alerts","/docs/api/rest/get-all-alerts",1,{"_13":26,"_15":27,"_17":18,"_19":28},"Create an alert","/docs/api/rest/create-an-alert",2,{"_13":30,"_15":31,"_17":18,"_19":32},"Update an alert by ID","/docs/api/rest/update-an-alert-by-id",3,{"_13":34,"_15":35,"_17":18,"_19":36},"Delete an alert by ID","/docs/api/rest/delete-an-alert-by-id",4,{"_13":38,"_15":39,"_17":18,"_19":40},"Get a list of webhooks","/docs/api/rest/get-a-list-of-webhooks",5,{"_13":42,"_15":43,"_17":18,"_19":44},"Create a webhook","/docs/api/rest/create-a-webhook",6,{"_13":46,"_15":47,"_17":18,"_19":48},"Update a webhook","/docs/api/rest/update-a-webhook",7,{"_13":50,"_15":51,"_17":18,"_19":52},"Delete a webhook","/docs/api/rest/delete-a-webhook",8,{"_13":54,"_15":55,"_17":18,"_19":56},"Get a list of websites","/docs/api/rest/get-a-list-of-websites",9,{"_13":58,"_15":59,"_17":18,"_19":60},"Create a website","/docs/api/rest/create-a-website",10,{"_8":62,"_10":63},"Types",[64,68],{"_13":65,"_15":66,"_17":18,"_19":67},"EventKind","/docs/api/rest/EventKind",11,{"_13":69,"_15":70,"_17":18,"_19":71},"RelativeDateString","/docs/api/rest/RelativeDateString",12,"breadcrumbs",[74,76],{"_13":9,"_15":75},"",{"_13":54,"_15":77},"docs/api/rest/get-a-list-of-websites","navlinks","slug","metadata",{"_13":54,"_82":83,"_84":85},"layout","wide","openapi","~/api/rest/openapi.yaml#GET /websites","/docs/api/rest",{"_3":88},{"_5":89,"_72":107,"_78":-7,"_79":77,"_110":111,"_80":112,"_113":114},[90,103],{"_8":9,"_10":91},[92,93,94,95,96,97,98,99,100,101,102],{"_13":14,"_15":16,"_17":18,"_19":20},{"_13":22,"_15":23,"_17":18,"_19":24},{"_13":26,"_15":27,"_17":18,"_19":28},{"_13":30,"_15":31,"_17":18,"_19":32},{"_13":34,"_15":35,"_17":18,"_19":36},{"_13":38,"_15":39,"_17":18,"_19":40},{"_13":42,"_15":43,"_17":18,"_19":44},{"_13":46,"_15":47,"_17":18,"_19":48},{"_13":50,"_15":51,"_17":18,"_19":52},{"_13":54,"_15":55,"_17":18,"_19":56},{"_13":58,"_15":59,"_17":18,"_19":60},{"_8":62,"_10":104},[105,106],{"_13":65,"_15":66,"_17":18,"_19":67},{"_13":69,"_15":70,"_17":18,"_19":71},[108,109],{"_13":9,"_15":75},{"_13":54,"_15":77},"code","\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nconst toc = [];\nconst frontmatter = {\n  \"title\": \"Get a list of websites\",\n  \"layout\": \"wide\",\n  \"openapi\": \"~/api/rest/openapi.yaml#GET /websites\"\n};\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ...props.components\n  }, {Atlas} = _components;\n  if (!Atlas) _missingMdxReference(\"Atlas\", true);\n  return _jsx(Atlas, {\n    references: [{\n      __UNSAFE_selector: function noRefCheck() {},\n      canonical: 'get-a-list-of-websites',\n      category: 'rest',\n      context: {\n        fullPath: 'https:/api.livesession.io/v1/websites',\n        group: ['Endpoints'],\n        method: 'get',\n        path: '/websites',\n        scopes: ['websites:read']\n      },\n      definitions: [{\n        properties: [],\n        title: 'Response',\n        variants: [{\n          meta: [{\n            name: 'status',\n            value: '200'\n          }, {\n            name: 'contentType',\n            value: 'application/json'\n          }],\n          properties: [{\n            description: 'Unique identifier for the website',\n            meta: [],\n            name: 'website_id',\n            properties: [],\n            type: 'string'\n          }, {\n            description: 'Domain name or hostname of the website (e.g., example.com)',\n            meta: [],\n            name: 'host',\n            properties: [],\n            type: 'string'\n          }],\n          title: '200'\n        }, {\n          meta: [{\n            name: 'status',\n            value: '400'\n          }, {\n            name: 'contentType',\n            value: 'application/json'\n          }],\n          properties: [{\n            description: '',\n            meta: [],\n            name: 'error',\n            properties: [{\n              description: 'Type of error (e.g., validation_error, authentication_error)',\n              meta: [],\n              name: 'type',\n              properties: [],\n              type: 'string'\n            }, {\n              description: 'Machine-readable error code',\n              meta: [],\n              name: 'code',\n              properties: [],\n              type: 'string'\n            }, {\n              description: 'Name of the parameter that caused the error',\n              meta: [],\n              name: 'param',\n              properties: [],\n              type: 'string'\n            }, {\n              description: 'Human-readable error message',\n              meta: [],\n              name: 'message',\n              properties: [],\n              type: 'string'\n            }, {\n              description: 'HTTP status code associated with the error',\n              meta: [],\n              name: 'http_status_code',\n              properties: [],\n              type: 'integer'\n            }, {\n              description: 'Unique identifier for the request that caused the error',\n              meta: [],\n              name: 'request_id',\n              properties: [],\n              type: 'string'\n            }],\n            type: 'object'\n          }],\n          title: '400'\n        }, {\n          meta: [{\n            name: 'status',\n            value: '500'\n          }, {\n            name: 'contentType',\n            value: 'application/json'\n          }],\n          properties: [{\n            description: '',\n            meta: [],\n            name: 'error',\n            properties: [{\n              description: 'Type of error (e.g., validation_error, authentication_error)',\n              meta: [],\n              name: 'type',\n              properties: [],\n              type: 'string'\n            }, {\n              description: 'Machine-readable error code',\n              meta: [],\n              name: 'code',\n              properties: [],\n              type: 'string'\n            }, {\n              description: 'Name of the parameter that caused the error',\n              meta: [],\n              name: 'param',\n              properties: [],\n              type: 'string'\n            }, {\n              description: 'Human-readable error message',\n              meta: [],\n              name: 'message',\n              properties: [],\n              type: 'string'\n            }, {\n              description: 'HTTP status code associated with the error',\n              meta: [],\n              name: 'http_status_code',\n              properties: [],\n              type: 'integer'\n            }, {\n              description: 'Unique identifier for the request that caused the error',\n              meta: [],\n              name: 'request_id',\n              properties: [],\n              type: 'string'\n            }],\n            type: 'object'\n          }],\n          title: '500'\n        }]\n      }],\n      description: _jsx(_components.p, {\n        children: \"List of all websites\"\n      }),\n      examples: {\n        groups: [{\n          description: 'Example request',\n          examples: [{\n            codeblock: {\n              tabs: [{\n                code: 'curl --request GET \\\\\\n     --url https://api.livesession.io/v1/websites \\\\\\n     --header \\'accept: application/json\\'',\n                highlighted: {\n                  annotations: [],\n                  code: 'curl --request GET \\\\\\n     --url https://api.livesession.io/v1/websites \\\\\\n     --header \\'accept: application/json\\'',\n                  lang: 'shellscript',\n                  meta: 'shell',\n                  style: {\n                    background: '#fffffe',\n                    color: '#333333',\n                    colorScheme: 'light'\n                  },\n                  themeName: 'cosmo-light',\n                  tokens: [['curl', '#7051D4'], ' ', ['--request GET', '#D12F1B'], ' ', ['\\\\', '#333333'], '\\n     ', ['--url https://api.livesession.io/v1/websites', '#D12F1B'], ' ', ['\\\\', '#333333'], '\\n     ', ['--header \\'accept: application/json\\'', '#D12F1B']],\n                  value: 'curl --request GET \\\\\\n     --url https://api.livesession.io/v1/websites \\\\\\n     --header \\'accept: application/json\\''\n                },\n                language: 'shell',\n                title: 'shell'\n              }, {\n                code: 'const options = {method: \\'GET\\', headers: {accept: \\'application/json\\'}};\\n\\nfetch(\\'https://api.livesession.io/v1/websites\\', options)\\n  .then(res => res.json())\\n  .then(res => console.log(res))\\n  .catch(err => console.error(err));',\n                highlighted: {\n                  annotations: [],\n                  code: 'const options = {method: \\'GET\\', headers: {accept: \\'application/json\\'}};\\n\\nfetch(\\'https://api.livesession.io/v1/websites\\', options)\\n  .then(res => res.json())\\n  .then(res => console.log(res))\\n  .catch(err => console.error(err));',\n                  lang: 'javascript',\n                  meta: 'javascript',\n                  style: {\n                    background: '#fffffe',\n                    color: '#333333',\n                    colorScheme: 'light'\n                  },\n                  themeName: 'cosmo-light',\n                  tokens: [['const', '#AD3DA4', {\n                    fontWeight: 'bold'\n                  }], ' ', ['options', '#000000'], ' ', ['= {method', '#333333'], [':', '#000000'], ' ', ['\\'GET\\'', '#D12F1B'], [', headers', '#333333'], [':', '#000000'], ' ', ['{accept', '#333333'], [':', '#000000'], ' ', ['\\'application/json\\'', '#D12F1B'], ['}};', '#333333'], '\\n\\n', ['fetch', '#7051D4'], ['(', '#333333'], ['\\'https://api.livesession.io/v1/websites\\'', '#D12F1B'], [', options)', '#333333'], '\\n  ', ['.', '#333333'], ['then', '#7051D4'], ['(res', '#333333'], ' ', ['=>', '#000000', {\n                    fontWeight: 'bold'\n                  }], ' ', ['res.', '#333333'], ['json', '#7051D4'], ['())', '#333333'], '\\n  ', ['.', '#333333'], ['then', '#7051D4'], ['(res', '#333333'], ' ', ['=>', '#000000', {\n                    fontWeight: 'bold'\n                  }], ' ', ['console.', '#333333'], ['log', '#7051D4'], ['(res))', '#333333'], '\\n  ', ['.', '#333333'], ['catch', '#7051D4'], ['(err', '#333333'], ' ', ['=>', '#000000', {\n                    fontWeight: 'bold'\n                  }], ' ', ['console.', '#333333'], ['error', '#7051D4'], ['(err));', '#333333']],\n                  value: 'const options = {method: \\'GET\\', headers: {accept: \\'application/json\\'}};\\n\\nfetch(\\'https://api.livesession.io/v1/websites\\', options)\\n  .then(res => res.json())\\n  .then(res => console.log(res))\\n  .catch(err => console.error(err));'\n                },\n                language: 'javascript',\n                title: 'javascript'\n              }, {\n                code: 'import requests\\n\\nurl = \"https://api.livesession.io/v1/websites\"\\n\\nheaders = {\"accept\": \"application/json\"}\\n\\nresponse = requests.get(url, headers=headers)\\n\\nprint(response.text)',\n                highlighted: {\n                  annotations: [],\n                  code: 'import requests\\n\\nurl = \"https://api.livesession.io/v1/websites\"\\n\\nheaders = {\"accept\": \"application/json\"}\\n\\nresponse = requests.get(url, headers=headers)\\n\\nprint(response.text)',\n                  lang: 'python',\n                  meta: 'python',\n                  style: {\n                    background: '#fffffe',\n                    color: '#333333',\n                    colorScheme: 'light'\n                  },\n                  themeName: 'cosmo-light',\n                  tokens: [['import', '#AD3DA4', {\n                    fontWeight: 'bold'\n                  }], ' ', ['requests', '#333333'], '\\n\\n', ['url =', '#333333'], ' ', ['\"https://api.livesession.io/v1/websites\"', '#D12F1B'], '\\n\\n', ['headers = {', '#333333'], ['\"accept\"', '#D12F1B'], [':', '#333333'], ' ', ['\"application/json\"', '#D12F1B'], ['}', '#333333'], '\\n\\n', ['response = requests.get(url, headers=headers)', '#333333'], '\\n\\n', ['print', '#7051D4'], ['(response.text)', '#333333']],\n                  value: 'import requests\\n\\nurl = \"https://api.livesession.io/v1/websites\"\\n\\nheaders = {\"accept\": \"application/json\"}\\n\\nresponse = requests.get(url, headers=headers)\\n\\nprint(response.text)'\n                },\n                language: 'python',\n                title: 'python'\n              }, {\n                code: 'package main\\n\\nimport (\\n  \"fmt\"\\n  \"net/http\"\\n  \"io\"\\n)\\n\\nfunc main() {\\n\\n  url := \"https://api.livesession.io/v1/websites\"\\n\\n  req, _ := http.NewRequest(\"GET\", url, nil)\\n\\n  req.Header.Add(\"accept\", \"application/json\")\\n\\n  res, _ := http.DefaultClient.Do(req)\\n\\n  defer res.Body.Close()\\n  body, _ := io.ReadAll(res.Body)\\n\\n  fmt.Println(string(body))\\n\\n}',\n                highlighted: {\n                  annotations: [],\n                  code: 'package main\\n\\nimport (\\n  \"fmt\"\\n  \"net/http\"\\n  \"io\"\\n)\\n\\nfunc main() {\\n\\n  url := \"https://api.livesession.io/v1/websites\"\\n\\n  req, _ := http.NewRequest(\"GET\", url, nil)\\n\\n  req.Header.Add(\"accept\", \"application/json\")\\n\\n  res, _ := http.DefaultClient.Do(req)\\n\\n  defer res.Body.Close()\\n  body, _ := io.ReadAll(res.Body)\\n\\n  fmt.Println(string(body))\\n\\n}',\n                  lang: 'go',\n                  meta: 'go',\n                  style: {\n                    background: '#fffffe',\n                    color: '#333333',\n                    colorScheme: 'light'\n                  },\n                  themeName: 'cosmo-light',\n                  tokens: [['package', '#333333'], ' ', ['main', '#713DA9'], '\\n\\n', ['import', '#AD3DA4', {\n                    fontWeight: 'bold'\n                  }], ' ', ['(', '#333333'], '\\n  ', ['\"fmt\"', '#D12F1B'], '\\n  ', ['\"net/http\"', '#D12F1B'], '\\n  ', ['\"io\"', '#D12F1B'], '\\n', [')', '#333333'], '\\n\\n', ['func', '#333333'], ' ', ['main', '#7051D4'], ['() {', '#333333'], '\\n\\n  ', ['url :=', '#333333'], ' ', ['\"https://api.livesession.io/v1/websites\"', '#D12F1B'], '\\n\\n  ', ['req, _ := http.', '#333333'], ['NewRequest', '#7051D4'], ['(', '#333333'], ['\"GET\"', '#D12F1B'], [', url,', '#333333'], ' ', ['nil', '#AD3DA4', {\n                    fontWeight: 'bold'\n                  }], [')', '#333333'], '\\n\\n  ', ['req.Header.', '#333333'], ['Add', '#7051D4'], ['(', '#333333'], ['\"accept\"', '#D12F1B'], [',', '#333333'], ' ', ['\"application/json\"', '#D12F1B'], [')', '#333333'], '\\n\\n  ', ['res, _ := http.DefaultClient.', '#333333'], ['Do', '#7051D4'], ['(req)', '#333333'], '\\n\\n  ', ['defer', '#AD3DA4', {\n                    fontWeight: 'bold'\n                  }], ' ', ['res.Body.', '#333333'], ['Close', '#7051D4'], ['()', '#333333'], '\\n  ', ['body, _ := io.', '#333333'], ['ReadAll', '#7051D4'], ['(res.Body)', '#333333'], '\\n\\n  ', ['fmt.', '#333333'], ['Println', '#7051D4'], ['(', '#333333'], ['string', '#AD3DA4', {\n                    fontWeight: 'bold'\n                  }], ['(body))', '#333333'], '\\n\\n', ['}', '#333333']],\n                  value: 'package main\\n\\nimport (\\n  \"fmt\"\\n  \"net/http\"\\n  \"io\"\\n)\\n\\nfunc main() {\\n\\n  url := \"https://api.livesession.io/v1/websites\"\\n\\n  req, _ := http.NewRequest(\"GET\", url, nil)\\n\\n  req.Header.Add(\"accept\", \"application/json\")\\n\\n  res, _ := http.DefaultClient.Do(req)\\n\\n  defer res.Body.Close()\\n  body, _ := io.ReadAll(res.Body)\\n\\n  fmt.Println(string(body))\\n\\n}'\n                },\n                language: 'go',\n                title: 'go'\n              }]\n            }\n          }]\n        }, {\n          description: 'Example response',\n          examples: [{\n            codeblock: {\n              tabs: [{\n                code: '[\\n  {\\n    \"website_id\": \"string\",\\n    \"host\": \"string\"\\n  }\\n]',\n                highlighted: {\n                  annotations: [],\n                  code: '[\\n  {\\n    \"website_id\": \"string\",\\n    \"host\": \"string\"\\n  }\\n]',\n                  lang: 'json',\n                  meta: 'json',\n                  style: {\n                    background: '#fffffe',\n                    color: '#333333',\n                    colorScheme: 'light'\n                  },\n                  themeName: 'cosmo-light',\n                  tokens: [['[', '#333333'], '\\n  ', ['{', '#333333'], '\\n    ', ['\"website_id\"', '#7051D4'], [':', '#333333'], ' ', ['\"string\"', '#D12F1B'], [',', '#333333'], '\\n    ', ['\"host\"', '#7051D4'], [':', '#333333'], ' ', ['\"string\"', '#D12F1B'], '\\n  ', ['}', '#333333'], '\\n', [']', '#333333']],\n                  value: '[\\n  {\\n    \"website_id\": \"string\",\\n    \"host\": \"string\"\\n  }\\n]'\n                },\n                language: 'json',\n                title: 'json'\n              }],\n              title: '200'\n            }\n          }, {\n            codeblock: {\n              tabs: [{\n                code: '{\\n  \"error\": {\\n    \"type\": \"string\",\\n    \"code\": \"string\",\\n    \"param\": \"string\",\\n    \"message\": \"string\",\\n    \"http_status_code\": 0,\\n    \"request_id\": \"string\"\\n  }\\n}',\n                highlighted: {\n                  annotations: [],\n                  code: '{\\n  \"error\": {\\n    \"type\": \"string\",\\n    \"code\": \"string\",\\n    \"param\": \"string\",\\n    \"message\": \"string\",\\n    \"http_status_code\": 0,\\n    \"request_id\": \"string\"\\n  }\\n}',\n                  lang: 'json',\n                  meta: 'json',\n                  style: {\n                    background: '#fffffe',\n                    color: '#333333',\n                    colorScheme: 'light'\n                  },\n                  themeName: 'cosmo-light',\n                  tokens: [['{', '#333333'], '\\n  ', ['\"error\"', '#7051D4'], [': {', '#333333'], '\\n    ', ['\"type\"', '#7051D4'], [':', '#333333'], ' ', ['\"string\"', '#D12F1B'], [',', '#333333'], '\\n    ', ['\"code\"', '#7051D4'], [':', '#333333'], ' ', ['\"string\"', '#D12F1B'], [',', '#333333'], '\\n    ', ['\"param\"', '#7051D4'], [':', '#333333'], ' ', ['\"string\"', '#D12F1B'], [',', '#333333'], '\\n    ', ['\"message\"', '#7051D4'], [':', '#333333'], ' ', ['\"string\"', '#D12F1B'], [',', '#333333'], '\\n    ', ['\"http_status_code\"', '#7051D4'], [':', '#333333'], ' ', ['0', '#272AD8'], [',', '#333333'], '\\n    ', ['\"request_id\"', '#7051D4'], [':', '#333333'], ' ', ['\"string\"', '#D12F1B'], '\\n  ', ['}', '#333333'], '\\n', ['}', '#333333']],\n                  value: '{\\n  \"error\": {\\n    \"type\": \"string\",\\n    \"code\": \"string\",\\n    \"param\": \"string\",\\n    \"message\": \"string\",\\n    \"http_status_code\": 0,\\n    \"request_id\": \"string\"\\n  }\\n}'\n                },\n                language: 'json',\n                title: 'json'\n              }],\n              title: '400'\n            }\n          }, {\n            codeblock: {\n              tabs: [{\n                code: '{\\n  \"error\": {\\n    \"type\": \"string\",\\n    \"code\": \"string\",\\n    \"param\": \"string\",\\n    \"message\": \"string\",\\n    \"http_status_code\": 0,\\n    \"request_id\": \"string\"\\n  }\\n}',\n                highlighted: {\n                  annotations: [],\n                  code: '{\\n  \"error\": {\\n    \"type\": \"string\",\\n    \"code\": \"string\",\\n    \"param\": \"string\",\\n    \"message\": \"string\",\\n    \"http_status_code\": 0,\\n    \"request_id\": \"string\"\\n  }\\n}',\n                  lang: 'json',\n                  meta: 'json',\n                  style: {\n                    background: '#fffffe',\n                    color: '#333333',\n                    colorScheme: 'light'\n                  },\n                  themeName: 'cosmo-light',\n                  tokens: [['{', '#333333'], '\\n  ', ['\"error\"', '#7051D4'], [': {', '#333333'], '\\n    ', ['\"type\"', '#7051D4'], [':', '#333333'], ' ', ['\"string\"', '#D12F1B'], [',', '#333333'], '\\n    ', ['\"code\"', '#7051D4'], [':', '#333333'], ' ', ['\"string\"', '#D12F1B'], [',', '#333333'], '\\n    ', ['\"param\"', '#7051D4'], [':', '#333333'], ' ', ['\"string\"', '#D12F1B'], [',', '#333333'], '\\n    ', ['\"message\"', '#7051D4'], [':', '#333333'], ' ', ['\"string\"', '#D12F1B'], [',', '#333333'], '\\n    ', ['\"http_status_code\"', '#7051D4'], [':', '#333333'], ' ', ['0', '#272AD8'], [',', '#333333'], '\\n    ', ['\"request_id\"', '#7051D4'], [':', '#333333'], ' ', ['\"string\"', '#D12F1B'], '\\n  ', ['}', '#333333'], '\\n', ['}', '#333333']],\n                  value: '{\\n  \"error\": {\\n    \"type\": \"string\",\\n    \"code\": \"string\",\\n    \"param\": \"string\",\\n    \"message\": \"string\",\\n    \"http_status_code\": 0,\\n    \"request_id\": \"string\"\\n  }\\n}'\n                },\n                language: 'json',\n                title: 'json'\n              }],\n              title: '500'\n            }\n          }]\n        }]\n      },\n      title: 'Get a list of websites',\n      type: 'rest_get'\n    }]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  toc,\n  frontmatter,\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",{"_13":54,"_82":83,"_84":85},"rawPage","---\ntitle: Get a list of websites\nlayout: wide\nopenapi: ~/api/rest/openapi.yaml#GET /websites\n---\n\n"]
